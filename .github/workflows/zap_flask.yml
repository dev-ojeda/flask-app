name: ZAP Scan on Flask App

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

on:
  workflow_run:
    workflows: ["SAST with Bandit"]
    types:
      - completed

jobs:
  zap_scan:
    name: ZAP Scan on Flask Application
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      # Paso 1: Checkout del código fuente
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Paso 2: Configurar Python y Flask
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.*'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Paso 3: Ejecutar la aplicación Flask
      - name: Run Flask App
        run: |
          export FLASK_APP=app.py
          flask run --host=0.0.0.0 --port=5000 &
          sleep 10 # Espera a que la app se inicie completamente

      # Paso 4: Ejecutar el escaneo ZAP
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'https://www.zaproxy.org'
          cmd_options: '-a' # Realiza un escaneo activo
          rules_file_name: '.zap/rules.tsv' # Opcional: personaliza reglas

      # Paso 5: Guardar el reporte ZAP como artefacto
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
